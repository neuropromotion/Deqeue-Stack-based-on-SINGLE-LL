#ifndef _LIST_H
#define _LIST_H
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#define MAX 50
typedef struct item 
{
    char name [MAX];
    unsigned int age;
} Item;
typedef struct node
{
    Item item;
    struct node * next;
} Node;
typedef Node * List; 
//Операция: инициализация списка пустым содержимым
//Предусловие: plist указывает на начало списка
//Постусловие: список инициализирован значением NULL
void InitializeList (List * plist);
//Операция: определение является ли список пустым 
//Предусловие: plist указывает на начало списка
//Постусловие: функция возвращает true если список пуст и false в противном случае
bool ListIsEmpty (const List * plist);
//Операция: определение является ли список полным / достаточно ли памяти для выделение на следующий узел
//Предусловие: 
//Постусловие: функция возвращает true если список полный / не достаточно места для выделения памяти и false в противном случае
bool ListIsFull (void);
//Операция: подсчет количества узлов в списке
//Предусловие: plist указывает на начало списка
//Постусловие:функция возвращает количество элементов / узлов списка
int ListItemCount (const List *plist);
//Операция: добавление нового узла в самое начало списка
//Предусловие: item является добавляемой структурой, plist указывает на начало списка
//Постусловие: функция возвращает true если новый узел создан успешно и false в противном случае
bool AddFront (Item item, List * plist);
//Операция: удаление узла с самого начала списка
//Предусловие: plist указывает на начало списка
//Постусловие: функция удаляет узел с самого начала списка и возращает значение item удаленного узла
Item DeleteFront (List * plist);
//Операция: добавление нового узла в конец списка
//Предусловие: pi является указателем на добавляемую структуру, plist указывает на начало списка
//Постусловие: функция возвращает true при успешном создании узла и добавлении его в конец списка, false в противном случае
bool EnQueue (Item * pi, List * plist);
//Операция: удаление узла с конца списка
//Предусловие: plist указывает на начало списка
//Постусловие: функция возвращает true при успешном удалении узла с конца списка, false в противном случае
Item DeQueue (List * plist);
//Операция: добавление нового узла в n-нное место списка
//Предусловие: pi является указателем на добавляемую структуру, plist указывает на начало списка, n - позиция в списке
//Постусловие: функция возвращает true при успешном создании узла и добавлении его n-нную позицию списка(или конец списка если
//n больше длины списка), false в противном случае
bool Insert (Item * pi, List * plist, int n);
//Операция: удаление элемента с n-нной позиции списка
//Предусловие: plist указывает на начало списка, n - позиция в списке
//Постусловие: функция возвращает true при успешном удалении узла с n-нной позиции (или с конца файла если
//n больше длины списка), false в противном случае
Item DeleteNth (List *plist, int n);
//Операция: удаление списка, очищение памяти
//Предусловие: plist указывает на начало списка
//Постусловие: функция очищает всю выделенную память под список
void DeleteList (List * plist);
//Операция: применение передаваемой функции ко всем элементам списка 
//Предусловие: plist указывает на начало списка, pfun указывает на применяемую фукнцию
//Постусловие: функция применяет функцию pfun к каждому элементу списка с начала до конца
void Traverse (List * plist, void (*pfun)(Item item));
//Операция: применение передаваемой функции ко всем элементам списка
//Предусловие: plist указывает на начало списка, pfun указывает на применяемую фукнцию
//Постусловие: функция применяет функцию pfun к каждому элементу списка с конца до начала
void Traverse_recurr (List * plist, void(*pfun)(Item item));
#endif